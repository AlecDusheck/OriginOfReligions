const fs = require('fs-extra');
const { minify } = require("terser");
const minifyHtml = require('html-minifier').minify;

// const jsFilePaths = ['dist/ngsw-worker.js', 'dist/safety-worker.js', 'dist/worker-basic.min.js'];
const jsFilePaths = [];
const htmlFilePaths = ['dist/index.html'];

(async () => {
  const getSavings = (fileContents, result, filePath) => {
    const diff = fileContents.length - result.length;
    const savings = fileContents.length ? (100 * diff / fileContents.length).toFixed(2) : 0;
    console.log("Successfully minified '" + filePath + "'" +
      ". Original size: " + fileContents.length +
      ". Minified size: " + result.length +
      ". Savings: " + diff + " (" + savings + "%)");
  }

  const minifyJsFile = async (filePath) => {
    const fileContents = (await fs.readFile(filePath)).toString();
    const result = await minify(fileContents, { sourceMap: false });

    if (!result || result.error) {
      console.log('Error detected while compressing! Abort!');
      console.log(result);
      return;
    }

    await fs.writeFile(filePath, result.code);
    getSavings(fileContents, result.code, filePath);
  };

  const minifyHtmlFile = async (filePath) => {
    const fileContents = (await fs.readFile(filePath)).toString();
    const result = minifyHtml(fileContents, {
      caseSensitive: false,
      collapseBooleanAttributes: true,
      collapseInlineTagWhitespace: false,
      collapseWhitespace: true,
      conservativeCollapse: false,
      decodeEntities: true,
      html5: true,
      includeAutoGeneratedTags: false,
      keepClosingSlash: false,
      minifyCSS: false,
      minifyJS: false,
      preserveLineBreaks: false,
      preventAttributesEscaping: false,
      processConditionalComments: true,
      removeAttributeQuotes: true,
      removeComments: false,
      removeEmptyAttributes: true,
      removeEmptyElements: false,
      removeRedundantAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true,
      removeTagWhitespace: true,
      trimCustomFragments: true,
      useShortDoctype: false
    });

    await fs.writeFile(filePath, result);
    getSavings(fileContents, result, filePath);
  };

  await Promise.all(jsFilePaths.map(filePath => minifyJsFile(filePath)));
  await Promise.all(htmlFilePaths.map(filePath => minifyHtmlFile(filePath)));
  console.log("Done!");
})();
